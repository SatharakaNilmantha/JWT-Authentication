package com.SatharakaNilmantha.JWTtutorial.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain (HttpSecurity httpSecurity) throws Exception {

        return httpSecurity

                // üîí CSRF ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                .csrf(c -> c.disable())

                // üì¥ Session ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑ë‡∂Ø‡∑ì‡∂∏ ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                .sessionManagement(s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                // ‚úÖ Authorization rules
                .authorizeHttpRequests(r -> r
                        .requestMatchers("/home/login").permitAll() // /login endpoint ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂∫‡∑ô‡∂ö‡∑î‡∂ß‡∂≠‡∑ä login ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä (permitAll)
                        .anyRequest().authenticated()// ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä request ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ü‡∑Ä‡∑ú‡∂≠‡∑ä -> Authentication verify ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂ï‡∂±
                )
                .httpBasic(Customizer.withDefaults())  // üîë Basic Authentication enable ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (Default Login popup ‡∂ë‡∂ö)
                .build();  // Filter chain ‡∂ë‡∂ö build ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    }
}

