package com.SatharakaNilmantha.JWTtutorial.config;

import com.SatharakaNilmantha.JWTtutorial.service.MyUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain (HttpSecurity httpSecurity) throws Exception {

        return httpSecurity

                // üîí CSRF ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                .csrf(c -> c.disable())

                // üì¥ Session ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑ë‡∂Ø‡∑ì‡∂∏ ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                .sessionManagement(s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                // ‚úÖ Authorization rules
                .authorizeHttpRequests(r -> r
                        .requestMatchers("/home/login").permitAll() // /login endpoint ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂∫‡∑ô‡∂ö‡∑î‡∂ß‡∂≠‡∑ä login ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä (permitAll)
                        .anyRequest().authenticated()// ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä request ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ü‡∑Ä‡∑ú‡∂≠‡∑ä -> Authentication verify ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂ï‡∂±
                )
                .httpBasic(Customizer.withDefaults())  // üîë Basic Authentication enable ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (Default Login popup ‡∂ë‡∂ö)
                .authenticationProvider(daoAuthenticationProvider())
                .build();  // Filter chain ‡∂ë‡∂ö build ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    }


    // üîë DaoAuthenticationProvider ‡∂ë‡∂ö configure ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    // (UserDetailsService + PasswordEncoder ‡∂ë‡∂ö use ‡∂ö‡∂ª‡∂± authentication provider ‡∂ë‡∂ö‡∂ö‡∑ä)
    @Bean
    public DaoAuthenticationProvider daoAuthenticationProvider (){

        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService());
        provider.setPasswordEncoder(passwordEncoder());

        return provider;
    }

    // üîê Password encode / hash ‡∂ö‡∂ª‡∂±‡∑ä‡∂± use ‡∂ö‡∂ª‡∂± PasswordEncoder ‡∂ë‡∂ö define ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    // üí° User ‡∂ë‡∂ö DB ‡∂ë‡∂ö‡∑ö save ‡∑Ä‡∑ô‡∂Ω‡∑è ‡∂≠‡∑í‡∂∫‡∑ô‡∂± password ‡∂ë‡∂ö compare ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑ô‡∂Ω‡∑è‡∑Ä‡∂ß ‡∂∏‡∑ö encoder ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è
    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder(12);   // (BCrypt algorithm ‡∂ë‡∂ö use ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è ‚Äì strength = 12)
    }

    // üë§ User details load ‡∂ö‡∂ª‡∂±‡∑ä‡∂± custom UserDetailsService ‡∂ë‡∂ö‡∂ö‡∑ä register ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    // üí° Login ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂∫‡∂± user ‡∂ë‡∂ö‡∂ú‡∑ö username & password load ‡∂ö‡∂ª‡∂Ω‡∑è validate ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    @Bean
    public UserDetailsService userDetailsService(){
        return new MyUserDetailsService();
    }



}

