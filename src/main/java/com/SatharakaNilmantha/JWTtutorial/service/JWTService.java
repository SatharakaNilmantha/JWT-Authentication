package com.SatharakaNilmantha.JWTtutorial.service;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Service;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Date;

@Service
public class JWTService {


//------------Step 01 ‚Üí SecretKey generate ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∑Ñ ‡∂ë‡∂∫ final variable ‡∂ë‡∂ö‡∂ß assign ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏--------------------------------//
    private final SecretKey secretKey; // üîë JWT sign / verify ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∫‡∑ú‡∂Ø‡∑è ‡∂ú‡∂±‡∑ä‡∂± secret key ‡∂ë‡∂ö (final variable ‡∂ë‡∂ö‡∂ö‡∑ä)

    // üõ†Ô∏è Constructor ‡∂ë‡∂ö - Application run ‡∑Ä‡∑ô‡∂Ø‡∑ä‡∂Ø‡∑ì SecretKey ‡∂ë‡∂ö‡∂ö‡∑ä generate ‡∂ö‡∂ª‡∂Ω‡∑è assign ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    public JWTService() {
        try {
            // üé≤ "HmacSHA256" algorithm ‡∂ë‡∂ö use ‡∂ö‡∂ª‡∂Ω‡∑è SecretKey generate ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
            SecretKey k = KeyGenerator.getInstance("HmacSHA256").generateKey();

            // üîí Keys.hmacShaKeyFor() method ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä byte[] ‡∂ë‡∂ö convert ‡∂ö‡∂ª‡∂Ω‡∑è real secretKey ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
            secretKey = Keys.hmacShaKeyFor(k.getEncoded());
        } catch (Exception e) {
            // ‚ö†Ô∏è key generate ‡∑Ä‡∑ô‡∂Ø‡∑ä‡∂Ø‡∑ì error ‡∂Ü‡∑Ä‡∑ú‡∂≠‡∑ä RuntimeException ‡∂ë‡∂ö‡∂ö‡∑ä throw ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (aniwaryai)
            throw new RuntimeException(e);
        }
    }


//------------Step 02 ‚Üí JWT Token generate ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∑Ñ ‡∂ë‡∂∫ return ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ --------------------------------//

    public String getJWTToken() {
        return Jwts.builder()
                .subject("satharaka")                                              // üë§ Token ‡∂ë‡∂ö‡∂ß subject (user name / user id) set ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                .issuedAt(new Date(System.currentTimeMillis()))                       // üïí Token issue ‡∂ö‡∂ª‡∂± time ‡∂ë‡∂ö
                .expiration(new Date(System.currentTimeMillis()+ 1000 * 60 * 15))     // ‚è≥ Expiration time (‡∂∏‡∑ö‡∂ö‡∑ö 15 minutes)
                .signWith(secretKey)                                                  // üîë SecretKey ‡∂ë‡∂ö use ‡∂ö‡∂ª‡∂Ω‡∑è token ‡∂ë‡∂ö sign ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                .compact();                                                           // üì¶ Token ‡∂ë‡∂ö final string ‡∂ë‡∂ö‡∂ö‡∑ä return ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    }

//------------Step 03 ‚Üí JWT Token ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä username extract ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ --------------------------------//

    public String getUserName(String token) {
        try {
            return Jwts
                    .parser()                                           // üõ†Ô∏è Parser ‡∂ë‡∂ö‡∂ö‡∑ä build ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                    .verifyWith(secretKey).build()                      // üîë Sign verify ‡∂ö‡∂ª‡∂±‡∑ä‡∂± SecretKey ‡∂ë‡∂ö ‡∂Ø‡∑ô‡∂±‡∑Ä‡∑è
                    .parseSignedClaims(token)                           // üì© Signed token ‡∂ë‡∂ö parse ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
                    .getPayload()                                       // üì¶ Token payload ‡∂ë‡∂ö (claims)
                    .getSubject();                                      // üë§ Subject (username) extract ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        }catch (Exception e){
            return "token is not correct";
        }

    }

}
